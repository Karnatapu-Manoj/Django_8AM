Create a folder or Directory for Django Projects :
====================================================

$ mkdir djangoprojects
$ cd djangoprojects


Creating the first project in Django :
========================================

Syntax:
````````
		$ django-admin startproject <projectname>

description :
``````````````
	--> django-admin ===>  command for the initial Django FrameWork
	--> startproject ===>  option
	--> projectname  ===>  Name of the project as per the business request.

Note:
~~~~~~~~

	You’ll need to avoid naming projects after built-in Python or Django components. In particular, this means you should avoid using names like django (which will conflict with Django itself) or test (which conflicts with a built-in Python package).


Example:
`````````
	$ django-admin startproject mysite
	$ cd mysite
	$ dir / ls
# system hidden directories
. ==> Current directory
.. => Root directory
manage.py ==> command file to manage Django project root
mysite ==> Django level directory(project directory)

tree:
``````
	Display directory paths and (optionally) files in Each Subdirectory

Syntax:
````````
	tree[/A][/F]

Example:
`````````
	$ tree /F

Django Project Architecture :
=================================
	By the cmd "django-admin startproject mysite"

	It creates the following Tree diagram of dirctories

mysite/
   | manage.py
   | mysite/
       | __init__.py
       | settings.py
       | urls.py
       | asgi.py
       | wsgi.py

These files are:

* The outer mysite/ root directory is a container for your project. Its name doesn’t matter to Django; you can rename it to anything you like.

* manage.py: A command-line utility that lets you interact with this Django project in various ways. You can read all the details about manage.py in django-admin and manage.py.

* The inner mysite/ directory is the actual Python package for your project. Its name is the Python package name you’ll need to use to import anything inside it (e.g. mysite.urls).

* mysite/__init__.py: An empty file that tells Python that this directory should be considered a Python package. If you’re a Python beginner, read more about packages in the official Python docs.

* mysite/settings.py: Settings/configuration for this Django project. Django settings will tell you all about how settings work.

* mysite/urls.py: The URL declarations for this Django project; a “table of contents” of your Django-powered site. You can read more about URLs in URL dispatcher.

* mysite/asgi.py: An entry-point for ASGI-compatible web servers to serve your project. See How to deploy with ASGI for more details.

* mysite/wsgi.py: An entry-point for WSGI-compatible web servers to serve your project. See How to deploy with WSGI for more details.


Running a Django Project :
=============================

	Django project has a built-in development server

Example:
``````````
	$ py manage.py runserver	  (Windows)
  (or)
	$ python manage.py runserver  (Unix/Linux/Windows)
  (or)
	$ python3 manage.py runserver (Unix/Linux/Mac)

Description :
```````````````
--py or python or python3 ==> Interpreter name
--manage.py  ==> to manage project resources
--runserver ==> Command to start the server


	Server will run with few warnings, Just open any web major browser, Enter the ip address like , 127.0.0.1/8000
To Quit the server with ctrl+C (or) ctrl+Break


Django project files and Description :
========================================

	__init__.py :
					
				It is an Empty file that tells to the Python that this directory should be considered as a python package.

	settings.py :
		
			It is the central configuration for all Django projects by Default, Installed_APPS contains the following apps:

django.contrib.admin - The admin site you'll use it shortly
django.contrib.auth  - An authentication system
django.contrib.Contenttypes - A Framework for Content types
django.contrib.Sessions - A Session Framework
django.contrib.messages	- A messaging Framework
django.contrib.staticfiles - A Framework for managing static Files

	Middleware :

			It is a framework of hacks into Django's request/response processing. It has the following major components.

	1. Templates		2. Databases		3. WSGI		
	
	4. SECRET_KEY		5. ALLOWED_HOSTS	6. AUTH_PASSWORD_VALIDATORS


	Managing static Files :

			Websites generally need to server additional files such as image, JS, or CSS
	
	URLS.py :
	
			Contains URL patterns for the Django project

	WSGI.py :
	
			Contains WSGI Configuration properties for the Django project. It is the recommended approach to deploy Django applications on producion

	manage.py :
	
		It is a command-Line utility, Which allows to intract with the project in various ways also use to manage an application. It can perform app creation and runserver run test case and migrations.

Removes Directory:
```````````````````
	$ rd ---> Removes a directory

Syntax:
```````
	$ rd [options]

	/Q ==> Quiet mode (default)
	/s ==> Removes all dirs & files in the specified Directory

Example:
`````````
	$ rd Dirname ==> To remove Empty Directory
	$ rd/s Dirname ==> To remove Non-Empty dir-Structures

$ django-admin help --commands :

	To display list of commands related django environment
	check
    compilemessages
    createcachetable
    dbshell
    diffsettings
    dumpdata
    flush
    inspectdb
    loaddata
    makemessages
    makemigrations
    migrate
    runserver
    sendtestemail
    shell
    showmigrations
    sqlflush
    sqlmigrate
    sqlsequencereset
    squashmigrations
    startapp
    startproject
    test
    testserver

Synatx:
````````
	django-admin help <subcommand>

Example:
`````````
	$ django-admin help check
	$ django-admin help shell
	$ django-admin help version


How to change Django Server Port number ?
````````````````````````````````````````````
	$ py manage.py runserver :8888

	Now server running on port number :8888
We have to send the request with this port number only
	http://127.0.0.1:8888/

More Examples :
````````````````
	$ python manage.py runserver 4345
	$ python manage.py runserver 96.126.104.88:8800
	$ py manage.py rnserver 192.18.0.2:8888
	$ python manage.py runserver 6666

If a port number already existed, it displays "this address is restricted"


Best Books For "DJANGO"  :
===============================

	1. Django For Bussiness ==> Willian.S.Vincent
	2. Build Your First Website with Django 2.2.2 ==> Nigel George


















